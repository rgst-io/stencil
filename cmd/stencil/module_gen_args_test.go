package main

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"testing"

	"go.rgst.io/stencil/v2/internal/yaml"
	"go.rgst.io/stencil/v2/pkg/configuration"
	"go.rgst.io/stencil/v2/pkg/slogext"
	"gotest.tools/v3/assert"
)

func TestGenerateArgumentDocs(t *testing.T) {
	cmd := NewModuleGenArgsDocsCommand(slogext.NewTestLogger(t))

	tmpDir := t.TempDir()

	mf := &configuration.TemplateRepositoryManifest{
		Name: "testing",
		Arguments: map[string]configuration.Argument{
			"string": {
				Description: "A string!",
				Schema: map[string]any{
					"type": "string",
				},
			},
			"object": {
				Required: true,
				Schema: map[string]any{
					"type": "object",
				},
			},
			"oneOf": {
				Schema: map[string]any{
					"oneOf": []map[string]any{
						{"type": "string"},
						{"type": "object"},
					},
				},
			},
			"enum": {
				Schema: map[string]any{
					"type": "string",
					"enum": []any{"foo", "bar", "baz"},
				},
			},
			"from": {
				Description: "Does something with this",
				From:        "github.com/rgst-io/stencil-golang",
			},
		},
	}

	b, err := yaml.Marshal(mf)
	assert.NilError(t, err, "expected manifest marshaling to not fail")
	assert.NilError(t, os.WriteFile(filepath.Join(tmpDir, "manifest.yaml"), b, 0o755), "expected writing manifest to not fail")

	assert.NilError(t, testRunCommand(t, cmd, tmpDir), "expected command to not fail")

	outputPath := filepath.Join(tmpDir, "docs", "arguments.md")
	_, err = os.Stat(outputPath)
	assert.NilError(t, err, "expected %s to be created", outputPath)

	got, err := os.ReadFile(outputPath)
	assert.NilError(t, err, "expected %s to be readable", outputPath)

	defer func() {
		if t.Failed() {
			fmt.Println("got:")
			fmt.Println(strings.ReplaceAll(string(got), "`", "`+\"`\"+`"))
		}
	}()

	want := `<!-- Generated by 'stencil module gen-args'. DO NOT EDIT. -->
# Arguments

- [enum](#enum)
- [from](#from)
- [object](#object)
- [oneOf](#oneOf)
- [string](#string)

## Manifest Arguments

### ` + "`" + `enum` + "`" + `

**Type**: ` + "`" + `string` + "`" + `

### ` + "`" + `object` + "`" + `

**Required**

**Type**: ` + "`" + `object` + "`" + `

### ` + "`" + `oneOf` + "`" + `

**Schema**:

` + "`" + `` + "`" + `` + "`" + `json
{
  "oneOf": [
    {
      "type": "string"
    },
    {
      "type": "object"
    }
  ]
}
` + "`" + `` + "`" + `` + "`" + `

### ` + "`" + `string` + "`" + `

**Type**: ` + "`" + `string` + "`" + `

A string!

## Shared Arguments

The following arguments are exposed by dependencies that this module
consumes.

### ` + "`" + `from` + "`" + `

**From**: https://github.com/rgst-io/stencil-golang

Does something with this`

	assert.Equal(t, strings.TrimSpace(string(got)), strings.TrimSpace(want))
}
